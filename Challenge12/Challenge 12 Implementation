# Challenge 12: The Interactive Exploit

## Challenge Overview
Participants must trigger specific error conditions in a simulated medical device interface to extract sensitive system information from error messages that reveal the flag.
Participent goes to https://dmburl.github.io/HCHCTF1/c12MedicalDevice.html to complete the challenge.
## Technical Implementation

### Device Interface Setup
Create a web-based medical device simulator that mimics a **Patient Vital Signs Monitor** with the following components:

#### Main Interface Elements:
- Patient selection dropdown
- Vital signs display (Heart Rate, Blood Pressure, O2 Sat, Temperature)
- Time range selector (1hr, 4hr, 8hr, 24hr)
- Export data button
- System settings button (locked/requires admin)
- Calibration button

#### Backend Error Triggers:
The application should be designed to produce different error messages based on specific input combinations:

### Error Trigger Scenarios

#### 1. SQL Injection Attempt (Reveals Database Info)
- **Trigger**: Enter `'; DROP TABLE patients; --` in patient search field
- **Error Message**: 
  ```
  Database Error: Invalid SQL syntax near '; DROP TABLE patients; --'
  Connection: mysql://monitor_user:Med1c4l_P@55@db-server-01.hospital.local:3306/patient_vitals
  Query failed on table: vital_readings
  Flag segment: SAINT{DB_3XP0
  ```

#### 2. Path Traversal Attempt (Reveals File System)
- **Trigger**: Try to export data with filename `../../../etc/passwd`
- **Error Message**:
  ```
  File System Error: Access denied to path '/opt/meddev/exports/../../../etc/passwd'
  Current working directory: /opt/meddev/vital_monitor/
  Log file: /var/log/meddev/access.log
  Flag segment: 5ED_V14_3RR
  ```

#### 3. Buffer Overflow Simulation (Reveals Memory Info)
- **Trigger**: Enter extremely long patient name (>256 characters)
- **Error Message**:
  ```
  Memory Allocation Error: Buffer overflow detected in patient_name field
  Stack trace: vital_monitor.exe -> process_patient_data() -> validate_input()
  Debug symbols loaded from: C:\Program Files\MedDevice\vital_monitor\debug\symbols.pdb
  Flag segment: 0R_M3SS4G3S}
  ```

#### 4. Network Timeout (Reveals Network Configuration)
- **Trigger**: Select time range "24hr" + patient ID "999999" (non-existent)
- **Error Message**:
  ```
  Network Timeout: Failed to connect to data server
  Primary server: 192.168.100.15:8443 (timeout after 30s)
  Backup server: 192.168.100.16:8443 (unreachable)
  Network interface: eth0 (10.0.2.100/24)
  Default gateway: 10.0.2.1
  Final flag assembly hint: Combine all segments in order of discovery
  ```

#### 5. Authentication Bypass Attempt (Reveals Service Info)
- **Trigger**: Try to access system settings with common credentials (admin/admin, admin/password, etc.)
- **Error Message**:
  ```
  Authentication Failed: Invalid credentials for user 'admin'
  LDAP server: dc-01.hospital.local:389
  Service account: CN=meddev_svc,OU=ServiceAccounts,DC=hospital,DC=local
  Last successful login: 2024-10-15 14:23:07 UTC
  Hint: Look for patterns in previous error messages
  ```

### Progressive Discovery Mechanism

#### Stage 1: Accidental Discovery
- Participants initially encounter errors through normal interaction attempts
- First error message should be obvious (like the authentication failure)
- This teaches them that error messages contain useful information

#### Stage 2: Intentional Exploitation  
- Armed with knowledge that errors reveal info, participants start trying to trigger more
- Each error type requires different approaches:
  - **Input validation errors**: Malformed data in forms
  - **File system errors**: Path manipulation in export functions
  - **Network errors**: Resource exhaustion or invalid requests
  - **Database errors**: SQL injection attempts

#### Stage 3: Information Assembly
- The complete flag is split across multiple error messages: `SAINT{DB_3XP05ED_V14_3RR0R_M3SS4G3S}`
- Participants must trigger all error types to collect all segments
- Final hint tells them to combine segments in order of discovery

## User Experience Flow

### 1. Initial Interaction
```
Participant loads the vital signs monitor interface
Sees normal patient data display
Tries to access locked admin settings
Gets first error message with authentication details
```

### 2. Exploration Phase  
```
Participant realizes error messages contain sensitive info
Begins systematically trying different inputs
Each successful error trigger reveals new system information
Starts collecting flag segments
```

### 3. Advanced Exploitation
```
Participant tries more sophisticated attacks:
- SQL injection in search fields
- Path traversal in file operations  
- Buffer overflow in input fields
- Network enumeration through resource requests
```

### 4. Flag Assembly
```
Participant collects all segments:
- SAINT{DB_3XP0 (from database error)
- 5ED_V14_3RR (from file system error)  
- 0R_M3SS4G3S} (from memory error)
Final flag: SAINT{DB_3XP05ED_V14_3RR0R_M3SS4G3S}
```

## Technical Implementation Details

### Frontend (HTML/JS)
```javascript
// Example error trigger detection
function handlePatientSearch(input) {
    if (input.includes("DROP TABLE") || input.includes("'")) {
        showError("database");
    } else if (input.includes("../")) {
        showError("filesystem");  
    } else if (input.length > 256) {
        showError("memory");
    }
    // Normal processing...
}
```

### Error Display System
- Errors should appear in a realistic medical device error dialog
- Include timestamp, error codes, and technical details
- Make the sensitive information look like legitimate debug output
- Flag segments should be embedded naturally in technical details

### Hint System
- Provide subtle hints if participants get stuck
- "System administrator noticed unusual error logs..."
- "The device seems to be very verbose when things go wrong..."
- "Multiple error types have been detected in the audit logs..."

## Learning Objectives

### Security Concepts Taught:
1. **Information Disclosure**: How error messages leak sensitive data
2. **Attack Surface Mapping**: Using errors to understand system architecture  
3. **Input Validation**: How insufficient validation leads to information leakage
4. **Defense in Depth**: Why error handling should be part of security design

### Real-World Relevance:
- Medical devices often have poor error handling
- Attackers use information disclosure for reconnaissance
- Error messages can reveal database structures, file paths, network topology
- Proper error handling should show generic messages to users

## Difficulty Progression
- **Beginner**: Find obvious authentication error
- **Intermediate**: Discover SQL injection and path traversal errors
- **Advanced**: Trigger buffer overflow and network enumeration errors
- **Expert**: Assemble complete flag from all error sources

This challenge effectively bridges the gap between passive information gathering and active exploitation while teaching crucial security concepts about information disclosure.